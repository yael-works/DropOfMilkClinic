// <auto-generated />
using System;
using DropOfMilkClinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DropOfMilkClinic.Data.Migrations
{
    [DbContext(typeof(DataContex))]
    partial class DataContexModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DropOfMilkClinic.Entities.Baby", b =>
                {
                    b.Property<string>("BabyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBaby")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BabyId");

                    b.ToTable("Baby");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("BabyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.HasIndex("BabyId")
                        .IsUnique();

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Nurse", b =>
                {
                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("NurseId");

                    b.HasIndex("BranchId");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Turn", b =>
                {
                    b.Property<string>("TurnId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BabyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TurnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TurnId");

                    b.HasIndex("BabyId");

                    b.HasIndex("BranchId");

                    b.ToTable("Turn");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Branch", b =>
                {
                    b.HasOne("DropOfMilkClinic.Entities.Baby", null)
                        .WithOne("Branch")
                        .HasForeignKey("DropOfMilkClinic.Entities.Branch", "BabyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Nurse", b =>
                {
                    b.HasOne("DropOfMilkClinic.Entities.Branch", "Branch")
                        .WithMany("Nurses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Turn", b =>
                {
                    b.HasOne("DropOfMilkClinic.Entities.Baby", null)
                        .WithMany("Turns")
                        .HasForeignKey("BabyId");

                    b.HasOne("DropOfMilkClinic.Entities.Branch", null)
                        .WithMany("Turns")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Baby", b =>
                {
                    b.Navigation("Branch")
                        .IsRequired();

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("DropOfMilkClinic.Entities.Branch", b =>
                {
                    b.Navigation("Nurses");

                    b.Navigation("Turns");
                });
#pragma warning restore 612, 618
        }
    }
}
